! function() {
    "use strict";
    window.cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame ||
        window.mozCancelAnimationFrame, window.requestAnimationFrame = window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame, angular.module(
            "kotterAudioRecorder", ["kotterAudioRecorder.config", "kotterAudioRecorder.services",
                "kotterAudioRecorder.controllers", "kotterAudioRecorder.directives"
            ]), angular.module("kotterAudioRecorder.config", []).constant("recorderScriptUrl",
            function() {
                var e = document.getElementsByTagName("script"),
                    t = e[e.length - 1].getAttribute("src"),
                    r = t.substr(0, t.lastIndexOf("/") + 1),
                    n = document.createElement("a");
                return n.href = r, n.href
            }()).constant("recorderPlaybackStatus", {
            STOPPED: 0,
            PLAYING: 1,
            PAUSED: 2
        }), angular.module("kotterAudioRecorder.controllers", ["kotterAudioRecorder.config",
            "kotterAudioRecorder.services"
        ]);
    var e = function(e) {
            var t = {};
            for (var r in e) e.hasOwnProperty(r) && Object.defineProperty(t, r, {
                get: function(t) {
                    var r = t;
                    return function() {
                        return e[r]
                    }
                }(r),
                enumerable: !0,
                configurable: !0
            });
            return t
        },
        t = function(e, t) {
            var r = new FileReader;
            r.onload = function(e) {
                t(e.target.result)
            }, r.readAsDataURL(e)
        },
        r = function(r, n, o, i, a, c, s, d) {
            var l = function(e) {
                    var t = i.$root.$$phase;
                    if ("$apply" !== t && "$digest" !== t) return i.$apply(e)
                },
                u = this,
                f = {
                    recorder: null,
                    url: null,
                    player: null
                },
                p = null,
                v = "recorded-audio-" + u.id,
                g = {
                    isRecording: !1,
                    playback: d.STOPPED,
                    isDenied: null,
                    isSwfLoaded: null,
                    isConverting: !1,
                    get isPlaying() {
                        return g.playback === d.PLAYING
                    },
                    get isStopped() {
                        return g.playback === d.STOPPED
                    },
                    get isPaused() {
                        return g.playback === d.PAUSED
                    }
                },
                m = angular.isDefined(u.convertMp3) ? !!u.convertMp3 : n.shouldConvertToMp3(),
                h = m ? new MP3Converter(n.getMp3Config()) : null;
            u.savetoServer = function(e) {
                    a.saveToServer(e)
                }, u.scheduleIndex = a.scheduleIndex, console.log("scheduleIndex - " + a.scheduleIndex),
                u.timeLimit = u.timeLimit || 0, u.status = e(g), u.isAvailable = n.isAvailable(), u
                .elapsedTime = 0, u.id || (u.id = o.generateUuid(), r.attr("id", u.id)), n.isHtml5 ||
                n.isCordova || (g.isSwfLoaded = n.swfIsLoaded(), i.$watch(function() {
                    return n.swfIsLoaded()
                }, function(e) {
                    g.isSwfLoaded = e
                })), n.setController(u.id, this);
            var w = function() {
                    g.playback = d.STOPPED, u.onPlaybackComplete(), l()
                },
                y = function() {
                    g.playback = d.PAUSED, u.onPlaybackPause()
                },
                b = function() {
                    g.playback = d.PLAYING, u.onPlaybackStart()
                },
                A = function() {
                    g.playback = d.PLAYING, u.onPlaybackResume()
                },
                k = function(e) {
                    if (null == document.getElementById(v)) {
                        r.append('<audio type="audio/mp3" id="' + v + '"></audio>');
                        var n = document.getElementById(v);
                        u.showPlayer && n.setAttribute("controls", ""), n.addEventListener("ended",
                            w), n.addEventListener("pause", function(e) {
                            this.duration !== this.currentTime && (y(), l())
                        }), n.addEventListener("playing", function(e) {
                            g.isPaused ? A() : b(), l()
                        })
                    }
                    e ? t(e, function(e) {
                        a.blob = e, a.audioModel = e, document.getElementById(v).src = e
                    }) : document.getElementById(v).removeAttribute("src")
                },
                R = function(e, t) {
                    h && (g.isConverting = !0, h.convert(e, function(e) {
                        g.isConverting = !1, t && t(e), l(u.onConversionComplete)
                    }, function() {
                        g.isConverting = !1
                    }), u.onConversionStart())
                };
            u.getAudioPlayer = function() {
                return n.isCordova ? f.player : document.getElementById(v)
            }, u.startRecord = function() {
                if (n.isAvailable()) {
                    g.isPlaying && (u.playbackPause(), g.playback = d.STOPPED), u.audioModel =
                        null;
                    var e = u.id,
                        t = n.getHandler(),
                        r = function() {
                            if (n.isCordova) f.url = o.cordovaAudioUrl(u.id), f.recorder = new Media(
                                f.url,
                                function() {
                                    console.log("Media successfully played")
                                },
                                function(e) {
                                    console.log("Media could not be launched" + e.code, e)
                                }), console.log("CordovaRecording"), f.recorder.startRecord();
                            else if (n.isHtml5) {
                                if (!t) return;
                                console.log("HTML5Recording"), t.clear(), t.record()
                            } else {
                                if (!n.isReady) return;
                                console.log("FlashRecording"), t.record(e, "audio.wav")
                            }
                            g.isRecording = !0, u.onRecordStart(), u.elapsedTime = 0, p = s(
                                function() {
                                    ++u.elapsedTime, u.timeLimit && u.timeLimit > 0 && u.elapsedTime >=
                                        u.timeLimit && u.stopRecord()
                                }, 1e3)
                        };
                    n.isCordova || t ? r() : g.isDenied || n.showPermission({
                        onDenied: function() {
                            g.isDenied = !0, i.$apply()
                        },
                        onAllowed: function() {
                            g.isDenied = !1, t = n.getHandler(), r(), l()
                        }
                    })
                }
            }, u.stopRecord = function() {
                var e = u.id;
                if (!n.isAvailable() || !g.isRecording) return !1;
                var t = n.getHandler(),
                    r = function(e) {
                        s.cancel(p), g.isRecording = !1;
                        var t = function(e) {
                            u.audioModel = e, a.getaudioModel = e, k(e)
                        };
                        m ? R(e, t) : t(e), k(null), u.onRecordComplete()
                    };
                n.isCordova ? (f.recorder.stopRecord(), window.resolveLocalFileSystemURL(f.url,
                    function(e) {
                        e.file(function(e) {
                            r(e)
                        })
                    },
                    function(e) {
                        console.log("Could not retrieve file, error code:", e.code)
                    })) : n.isHtml5 ? (t.stop(), t.getBuffer(function() {
                    t.exportWAV(function(e) {
                        r(e), l()
                    })
                })) : (t.stopRecording(e), r(t.getBlob(e)))
            }, u.playbackRecording = function() {
                if (g.isPlaying || !n.isAvailable() || g.isRecording || !u.audioModel) return !
                    1;
                n.isCordova ? (f.player = new Media(f.url, w, function() {
                    console.log("Playback failed")
                }), f.player.play(), b()) : u.getAudioPlayer().play()
            }, u.playbackPause = function() {
                if (!g.isPlaying || !n.isAvailable() || g.isRecording || !u.audioModel) return !
                    1;
                u.getAudioPlayer().pause(), n.isCordova && y()
            }, u.playbackResume = function() {
                if (g.isPlaying || !n.isAvailable() || g.isRecording || !u.audioModel) return !
                    1;
                g.isPaused ? (u.getAudioPlayer().play(), n.isCordova && A()) : u.playbackRecording()
            }, u.save = function(e) {
                if (!n.isAvailable() || g.isRecording || !u.audioModel) return !1;
                e || (e = "audio_recording_" + u.id + (u.audioModel.type.indexOf("mp3") > -1 ?
                    "mp3" : "wav"));
                var t = window.URL.createObjectURL(u.audioModel),
                    r = document.createElement("a");
                r.href = t, r.target = "_blank", r.download = e;
                var o = document.createEvent("Event");
                o.initEvent("click", !0, !0), r.dispatchEvent(o)
            }, u.isHtml5 = function() {
                return n.isHtml5
            }, u.autoStart && c(function() {
                u.startRecord()
            }, 1e3), r.on("$destroy", function() {
                s.cancel(p)
            }), a.control = u
        };
    r.$inject = ["$element", "recorderService", "recorderUtils", "$scope", "$rootScope", "$timeout",
            "$interval", "recorderPlaybackStatus"
        ], angular.module("kotterAudioRecorder.controllers").controller("recorderController", r),
        angular.module("kotterAudioRecorder.directives", ["kotterAudioRecorder.config",
            "kotterAudioRecorder.services", "kotterAudioRecorder.controllers"
        ]), angular.module("kotterAudioRecorder.directives").directive("ngAudioRecorderAnalyzer", [
            "recorderService", "recorderUtils",
            function(e, t) {
                return {
                    restrict: "E",
                    require: "^ngAudioRecorder",
                    template: '<div ng-if="!hide" class="audioRecorder-analyzer"><canvas class="analyzer" width="1200" height="400" style="max-width: 100%;"></canvas></div>',
                    link: function(r, n, o, i) {
                        function a(e) {
                            if (!u) {
                                var t = n.find("canvas")[0];
                                o.width && !isNaN(o.width) && (t.width = o.width), o.height &&
                                    !isNaN(o.height) && (t.height = parseInt(o.height)), s =
                                    t.width, d = t.height, u = t.getContext("2d")
                            }
                            var r = Math.round(s / 3),
                                i = new Uint8Array(f.analyserNode.frequencyBinCount);
                            f.analyserNode.getByteFrequencyData(i), u.clearRect(0, 0, s, d),
                                u.lineCap = "round";
                            for (var c = f.analyserNode.frequencyBinCount / r, p = 0; p < r; ++
                                p) {
                                for (var v = 0, g = Math.floor(p * c), m = 0; m < c; m++) v +=
                                    i[g + m];
                                v /= c;
                                i[p * c];
                                o.waveColor ? u.fillStyle = o.waveColor : u.fillStyle =
                                    "hsl( " + Math.round(360 * p / r) + ", 100%, 50%)", u.fillRect(
                                        3 * p, d, 1, -v)
                            }
                            l = window.requestAnimationFrame(a)
                        }

                        function c() {
                            window.cancelAnimationFrame(l), l = null
                        }
                        if (!e.isHtml5) return void(r.hide = !0);
                        var s, d, l, u, f = e.$html5AudioProps;
                        n.on("$destroy", function() {
                            c()
                        }), i.onRecordStart = function(e) {
                            return function() {
                                e.apply(), a()
                            }
                        }(i.onRecordStart), t.appendActionToCallback(i, "onRecordStart",
                            a, "analyzer"), t.appendActionToCallback(i,
                            "onRecordComplete", c, "analyzer")
                    }
                }
            }
        ]), angular.module("kotterAudioRecorder.directives").directive("ngAudioRecorderWaveView", [
            "recorderService", "recorderUtils", "$log",
            function(e, t, r) {
                return {
                    restrict: "E",
                    require: "^ngAudioRecorder",
                    link: function(e, n, o, i) {
                        if (!window.WaveSurfer) return void r.warn("WaveSurfer was found.");
                        var a;
                        n.html('<div class="waveSurfer"></div>');
                        var c = angular.extend({
                                container: n.find("div")[0]
                            }, o),
                            s = WaveSurfer.create(c);
                        s.setVolume(0), t.appendActionToCallback(i,
                            "onPlaybackStart|onPlaybackResume",
                            function() {
                                s.play()
                            }, "waveView"), t.appendActionToCallback(i,
                            "onPlaybackComplete|onPlaybackPause",
                            function() {
                                s.pause()
                            }, "waveView"), t.appendActionToCallback(i,
                            "onRecordComplete",
                            function() {
                                a || (a = i.getAudioPlayer(), a.addEventListener(
                                    "seeking",
                                    function(e) {
                                        var t = a.currentTime / a.duration;
                                        s.seekTo(t)
                                    }))
                            }, "waveView"), e.$watch(function() {
                            return i.audioModel
                        }, function(e) {
                            e instanceof Blob && s.loadBlob(e)
                        })
                    }
                }
            }
        ]), angular.module("kotterAudioRecorder.directives").directive("ngAudioRecorder", [
            "recorderService", "$timeout",
            function(e, t) {
                return {
                    restrict: "EA",
                    scope: {
                        audioModel: "=",
                        id: "@",
                        onRecordStart: "&",
                        onRecordComplete: "&",
                        onPlaybackComplete: "&",
                        onPlaybackStart: "&",
                        onPlaybackPause: "&",
                        onPlaybackResume: "&",
                        onConversionStart: "&",
                        onConversionComplete: "&",
                        showPlayer: "=?",
                        autoStart: "=?",
                        convertMp3: "=?",
                        timeLimit: "=?"
                    },
                    controllerAs: "recorder",
                    bindToController: !0,
                    template: function(e, t) {
                        return '<div class="audioRecorder"><div style="width: 250px; margin: 0 auto;"><div id="audioRecorder-fwrecorder"></div></div>' +
                            e.html() + "</div>"
                    },
                    controller: "recorderController",
                    link: function(r, n, o) {
                        t(function() {
                            if (e.isAvailable && !e.isHtml5 && !e.isCordova) {
                                var t = {
                                        allowscriptaccess: "always"
                                    },
                                    r = {
                                        id: "recorder-app",
                                        name: "recorder-app"
                                    },
                                    n = {
                                        save_text: ""
                                    };
                                swfobject.embedSWF(e.getSwfUrl(),
                                    "audioRecorder-fwrecorder", "0", "0",
                                    "11.0.0", "", n, t, r)
                            }
                        }, 100)
                    }
                }
            }
        ]), angular.module("kotterAudioRecorder.services", ["kotterAudioRecorder.config"]), angular
        .module("kotterAudioRecorder.services").provider("recorderService", ["recorderScriptUrl",
            function(e) {
                var t, r = null,
                    n = {
                        isHtml5: !1,
                        isReady: !1
                    },
                    o = {
                        onDenied: null,
                        onClosed: null,
                        onAllow: null
                    },
                    i = !1,
                    a = e + "../lib/recorder.swf",
                    c = !1,
                    s = {
                        bitRate: 92,
                        lameJsUrl: e + "../lib/lame.min.js"
                    },
                    d = {
                        isAvailable: !1,
                        loaded: !1,
                        configureMic: function() {
                            FWRecorder.isReady && (FWRecorder.configure(44, 100, 0, 2e3),
                                FWRecorder.setUseEchoSuppression(!1), FWRecorder.setLoopBack(
                                    !1))
                        },
                        allowed: !1,
                        externalEvents: function(e) {
                            arguments[1];
                            switch (arguments[0]) {
                                case "ready":
                                    parseInt(arguments[1]), parseInt(arguments[2]);
                                    FWRecorder.connect("recorder-app", 0), FWRecorder.recorderOriginalWidth =
                                        1, FWRecorder.recorderOriginalHeight = 1, d.loaded = !
                                        0;
                                    break;
                                case "microphone_user_request":
                                    FWRecorder.showPermissionWindow({
                                        permanent: !0
                                    });
                                    break;
                                case "microphone_connected":
                                    console.log("Permission to use MIC granted"), d.allowed = !
                                        0;
                                    break;
                                case "microphone_not_connected":
                                    console.log("Permission to use MIC denied"), d.allowed = !
                                        1;
                                    break;
                                case "permission_panel_closed":
                                    d.allowed ? d.setAllowed() : d.setDeclined(),
                                        FWRecorder.defaultSize(), angular.isFunction(o.onClosed) &&
                                        o.onClosed();
                                    break;
                                case "recording":
                                    FWRecorder.hide();
                                    break;
                                case "recording_stopped":
                                    FWRecorder.hide();
                                    break;
                                case "playing":
                                    break;
                                case "playback_started":
                                    arguments[2];
                                    break;
                                case "save_pressed":
                                    FWRecorder.updateForm();
                                    break;
                                case "saving":
                                    break;
                                case "saved":
                                    $.parseJSON(arguments[2]).saved;
                                    break;
                                case "save_failed":
                                    arguments[2];
                                    break;
                                case "save_progress":
                                    arguments[2], arguments[3];
                                    break;
                                case "stopped":
                                case "playing_paused":
                                case "no_microphone_found":
                                case "observing_level":
                                case "microphone_level":
                                case "microphone_activity":
                                case "observing_level_stopped":
                            }
                        },
                        isInstalled: function() {
                            return swfobject.getFlashPlayerVersion().major > 0
                        },
                        init: function() {
                            if (n.isHtml5 = !1, !d.isInstalled()) return void console.log(
                                "Flash is not installed, application cannot be initialized"
                            );
                            d.isAvailable = !0, window.fwr_event_handler = d.externalEvents,
                                window.configureMicrophone = d.configureMic
                        },
                        setAllowed: function() {
                            n.isReady = !0, r = FWRecorder, angular.isFunction(o.onAllowed) &&
                                o.onAllowed()
                        },
                        setDeclined: function() {
                            n.isReady = !1, r = null, angular.isFunction(o.onDenied) && o.onDenied()
                        },
                        getPermission: function() {
                            d.isAvailable && (FWRecorder.isMicrophoneAccessible() ? (d.allowed = !
                                0, setTimeout(function() {
                                    d.setAllowed()
                                }, 100)) : FWRecorder.showPermissionWindow({
                                permanent: !0
                            }))
                        }
                    },
                    l = {
                        audioContext: null,
                        inputPoint: null,
                        audioInput: null,
                        audioRecorder: null,
                        analyserNode: null
                    },
                    u = {
                        gotStream: function(e) {
                            var t = l.audioContext;
                            l.audioInput = t.createMediaStreamSource(e), l.audioInput.connect(
                                    l.inputPoint = t.createGain()), l.analyserNode = t.createAnalyser(),
                                l.analyserNode.fftSize = 2048, l.inputPoint.connect(l.analyserNode),
                                l.audioRecorder = new Recorder(l.audioInput);
                            var i = t.createGain();
                            i.gain.value = 0, l.inputPoint.connect(i), i.connect(t.destination),
                                n.isReady = !0, r = l.audioRecorder, angular.isFunction(o.onAllowed) &&
                                ("https:" == window.location.protocol && localStorage.setItem(
                                    "permission", "given"), o.onAllowed())
                        },
                        failStream: function(e) {
                            angular.isDefined(o.onDenied) && o.onDenied()
                        },
                        getPermission: function() {
                            navigator.getUserMedia({
                                audio: !0
                            }, u.gotStream, u.failStream)
                        },
                        init: function() {
                            n.isHtml5 = !0;
                            var e = window.AudioContext || window.webkitAudioContext;
                            e && !l.audioContext && (l.audioContext = new e), null !==
                                localStorage.getItem("permission") && u.getPermission()
                        }
                    };
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia, n.isCordova = !1;
                var f = function() {
                        "cordova" in window ? n.isCordova = !0 : !i && navigator.getUserMedia ?
                            u.init() : d.init()
                    },
                    p = {};
                n.controller = function(e) {
                    return p[e]
                }, n.getSwfUrl = function() {
                    return a
                }, n.setController = function(e, t) {
                    p[e] = t
                }, n.isAvailable = function() {
                    if (n.isCordova) {
                        if (!("Media" in window)) throw new Error(
                            'The Media plugin for cordova is required for this library, add plugin using "cordova plugin add cordova-plugin-media"'
                        );
                        return !0
                    }
                    return n.isHtml5 || d.isInstalled()
                }, n.getHandler = function() {
                    return r
                }, n.showPermission = function(e) {
                    if (!n.isAvailable()) return void console.warn(
                        "Neither HTML5 nor SWF is supported.");
                    e && angular.extend(o, e), n.isHtml5 ? u.getPermission() : d.getPermission()
                }, n.swfIsLoaded = function() {
                    return d.loaded
                }, n.shouldConvertToMp3 = function() {
                    return c
                }, n.getMp3Config = function() {
                    return s
                }, n.$html5AudioProps = l;
                var v = {
                    $get: ["recorderUtils", function(e) {
                        return t = e, f(), n
                    }],
                    forceSwf: function(e) {
                        return i = e, v
                    },
                    setSwfUrl: function(e) {
                        return a = e, v
                    },
                    withMp3Conversion: function(e, t) {
                        return c = !!e, s = angular.extend(s, t || {}), v
                    }
                };
                return v
            }
        ]), angular.module("kotterAudioRecorder.services").factory("recorderUtils", [function() {
            var e = {
                generateUuid: function() {
                    function e(e) {
                        var t = (Math.random().toString(16) + "000000000").substr(2,
                            8);
                        return e ? "-" + t.substr(0, 4) + "-" + t.substr(4, 4) : t
                    }
                    return e() + e(!0) + e(!0) + e()
                },
                cordovaAudioUrl: function(e) {
                    if (!window.cordova) return "record-audio" + e + ".wav";
                    var t = cordova.file.tempDirectory || cordova.file.externalApplicationStorageDirectory ||
                        cordova.file.sharedDirectory;
                    switch (t += Date.now() + "_recordedAudio_" + e.replace(
                        "/[^A-Za-z0-9_-]+/gi", "-"), window.cordova.platformId) {
                        case "ios":
                            t += ".wav";
                            break;
                        case "android":
                            t += ".amr";
                            break;
                        case "wp":
                            t += ".wma";
                            break;
                        default:
                            t += ".mp3"
                    }
                    return t
                }
            };
            return e.appendActionToCallback = function(e, t, r, n) {
                t.split(/\|/).forEach(function(t) {
                    if (!(angular.isObject(e) && angular.isFunction(r) && t in
                            e && angular.isFunction(e[t]))) throw new Error(
                        "One or more parameter supplied is not valid");
                    "$$appendTrackers" in e || (e.$$appendTrackers = []);
                    var o = t + "|" + n;
                    if (e.$$appendTrackers.indexOf(o) > -1) return void console
                        .log("Already appended: ", o);
                    e[t] = function(t) {
                        return function() {
                            t.apply(e, arguments), r.apply(e, arguments)
                        }
                    }(e[t]), e.$$appendTrackers.push(o)
                })
            }, e
        }])
}(),
function(e) {
    "use strict";

    function t(e, t, r) {
        t = t || "", r = r || 512;
        for (var n = atob(e), o = [], i = 0; i < n.length; i += r) {
            for (var a = n.slice(i, i + r), c = new Array(a.length), s = 0; s < a.length; s++) c[s] =
                a.charCodeAt(s);
            var d = new Uint8Array(c);
            o.push(d)
        }
        return new Blob(o, {
            type: t
        })
    }
    var r;
    r = {
        recorder: null,
        recorderOriginalWidth: 0,
        recorderOriginalHeight: 0,
        uploadFormId: null,
        uploadFieldName: null,
        isReady: !1,
        connect: function(e, t) {
            if (navigator.appName.indexOf("Microsoft") != -1 ? r.recorder = window[e] : r.recorder =
                document[e], !(t >= 40))
                if (r.recorder && r.recorder.init) {
                    if (r.recorderOriginalWidth = r.recorder.width, r.recorderOriginalHeight =
                        r.recorder.height, r.uploadFormId && $) {
                        var n = $(r.uploadFormId);
                        r.recorder.init(n.attr("action").toString(), r.uploadFieldName, n.serializeArray())
                    }
                } else setTimeout(function() {
                    r.connect(e, t + 1)
                }, 100)
        },
        playBack: function(e) {
            r.recorder.playBack(e)
        },
        pausePlayBack: function(e) {
            r.recorder.pausePlayBack(e)
        },
        playBackFrom: function(e, t) {
            r.recorder.playBackFrom(e, t)
        },
        record: function(e, t) {
            r.recorder.record(e, t)
        },
        stopRecording: function() {
            r.recorder.stopRecording()
        },
        stopPlayBack: function() {
            r.recorder.stopPlayBack()
        },
        observeLevel: function() {
            r.recorder.observeLevel()
        },
        stopObservingLevel: function() {
            r.recorder.stopObservingLevel()
        },
        observeSamples: function() {
            r.recorder.observeSamples()
        },
        stopObservingSamples: function() {
            r.recorder.stopObservingSamples()
        },
        resize: function(e, t) {
            r.recorder.width = e + "px", r.recorder.height = t + "px"
        },
        defaultSize: function() {
            r.resize(r.recorderOriginalWidth, r.recorderOriginalHeight)
        },
        show: function() {
            r.recorder.show()
        },
        hide: function() {
            r.recorder.hide()
        },
        duration: function(e) {
            return r.recorder.duration(e || r.uploadFieldName)
        },
        getBase64: function(e) {
            return "data:audio/wav;base64," + r.recorder.getBase64(e)
        },
        getBlob: function(e) {
            return t(r.getBase64(e).split(",")[1], "audio/wav")
        },
        getCurrentTime: function(e) {
            return r.recorder.getCurrentTime(e)
        },
        isMicrophoneAccessible: function() {
            return r.recorder.isMicrophoneAccessible()
        },
        updateForm: function() {
            var e = $(r.uploadFormId);
            r.recorder.update(e.serializeArray())
        },
        showPermissionWindow: function(e) {
            r.resize(240, 160);
            var t = function() {
                e && e.permanent ? r.recorder.permitPermanently() : r.recorder.permit()
            };
            setTimeout(t, 1)
        },
        configure: function(e, t, n, o) {
            switch (e = parseInt(e || 22), t = parseInt(t || 100), n = parseInt(n || 0), o =
                parseInt(o || 4e3), e) {
                case 44:
                case 22:
                case 11:
                case 8:
                case 5:
                    break;
                default:
                    throw "invalid rate " + e
            }
            if (t < 0 || t > 100) throw "invalid gain " + t;
            if (n < 0 || n > 100) throw "invalid silenceLevel " + n;
            if (o < -1) throw "invalid silenceTimeout " + o;
            r.recorder.configure(e, t, n, o)
        },
        setUseEchoSuppression: function(e) {
            if ("boolean" != typeof e) throw "invalid value for setting echo suppression, val: " +
                e;
            r.recorder.setUseEchoSuppression(e)
        },
        setLoopBack: function(e) {
            if ("boolean" != typeof e) throw "invalid value for setting loop back, val: " +
                e;
            r.recorder.setLoopBack(e)
        }
    }, e.FWRecorder = r
}(window),
function() {
    "use strict";
    var e = function(e, t) {
        if ("function" != typeof e) throw "The specified parameter must be a valid function";
        var r = e.toString();
        if (r.match(/\[native\s*code\]/i)) throw "You cannot bind a native function to a worker";
        return t = t || {}, "object" != typeof t && console.warn(
            "Params must be an object that is serializable with JSON.stringify, specified is: " +
            typeof t), window.URL.createObjectURL(new Blob(["(", r, ")(this,", JSON.stringify(
            t), ")"], {
            type: "application/javascript"
        }))
    };
    Function.prototype.toWorker = function(t) {
        var r = e(this, t);
        return new Worker(r)
    }
}(),
function(e) {
    "use strict";
    var t = function(e) {
            function t(e) {
                l = e.sampleRate
            }

            function r(e) {
                f.push(e[0]), u += e[0].length
            }

            function n(t) {
                var r = a(f, u),
                    n = d(r),
                    o = new Blob([n], {
                        type: t
                    });
                e.postMessage(o)
            }

            function o() {
                var t = [];
                t.push(a(f, u)), t.push(a(p, u)), e.postMessage(t)
            }

            function i() {
                u = 0, f = [], p = []
            }

            function a(e, t) {
                for (var r = new Float32Array(t), n = 0, o = 0; o < e.length; o++) r.set(e[o], n),
                    n += e[o].length;
                return r
            }

            function c(e, t, r) {
                for (var n = 0; n < r.length; n++, t += 2) {
                    var o = Math.max(-1, Math.min(1, r[n]));
                    e.setInt16(t, o < 0 ? 32768 * o : 32767 * o, !0)
                }
            }

            function s(e, t, r) {
                for (var n = 0; n < r.length; n++) e.setUint8(t + n, r.charCodeAt(n))
            }

            function d(e) {
                var t = new ArrayBuffer(44 + 2 * e.length),
                    r = new DataView(t);
                return s(r, 0, "RIFF"), r.setUint32(4, 32 + 2 * e.length, !0), s(r, 8, "WAVE"), s(r,
                    12, "fmt "), r.setUint32(16, 16, !0), r.setUint16(20, 1, !0), r.setUint16(
                    22, 1, !0), r.setUint32(24, l, !0), r.setUint32(28, 2 * l, !0), r.setUint16(
                    32, 2, !0), r.setUint16(34, 16, !0), s(r, 36, "data"), r.setUint32(40, 2 *
                    e.length, !0), c(r, 44, e), r
            }
            var l, u = 0,
                f = [],
                p = [];
            e.onmessage = function(e) {
                switch (e.data.command) {
                    case "init":
                        t(e.data.config);
                        break;
                    case "record":
                        r(e.data.buffer);
                        break;
                    case "exportWAV":
                        n(e.data.type);
                        break;
                    case "getBuffer":
                        o();
                        break;
                    case "clear":
                        i()
                }
            }
        },
        r = function(e, r) {
            var n = r || {},
                o = n.bufferLen || 4096;
            this.context = e.context, this.node = (this.context.createScriptProcessor || this.context
                .createJavaScriptNode).call(this.context, o, 2, 2);
            var i = t.toWorker();
            i.postMessage({
                command: "init",
                config: {
                    sampleRate: this.context.sampleRate
                }
            });
            var a, c = !1;
            this.node.onaudioprocess = function(e) {
                c && i.postMessage({
                    command: "record",
                    buffer: [e.inputBuffer.getChannelData(0)]
                })
            }, this.configure = function(e) {
                for (var t in e) e.hasOwnProperty(t) && (n[t] = e[t])
            }, this.record = function() {
                c = !0
            }, this.stop = function() {
                c = !1
            }, this.clear = function() {
                i.postMessage({
                    command: "clear"
                })
            }, this.getBuffer = function(e) {
                a = e || n.callback, i.postMessage({
                    command: "getBuffer"
                })
            }, this.exportWAV = function(e, t) {
                if (a = e || n.callback, t = t || n.type || "audio/wav", !a) throw new Error(
                    "Callback not set");
                i.postMessage({
                    command: "exportWAV",
                    type: t
                })
            }, i.onmessage = function(e) {
                a(e.data)
            }, e.connect(this.node), this.node.connect(this.context.destination)
        };
    e.Recorder = r
}(window),
function(e) {
    "use strict";
    var t = function(e, t) {
            console.log("MP3 conversion worker started."), "undefined" == typeof lamejs &&
                importScripts(t.lameJsUrl);
            var r, n, o, i, a, c, s = function() {
                    c = []
                },
                d = function(e) {
                    c.push(new Int8Array(e))
                },
                l = function(e) {
                    a = e || {}, i = new lamejs, s()
                },
                u = function(e) {
                    n = i.WavHeader.readHeader(new DataView(e)), console.log("wave:", n), o = new Int16Array(
                        e, n.dataOffset, n.dataLen / 2), r = new i.Mp3Encoder(n.channels, n.sampleRate,
                        a.bitRate || 128);
                    for (var t = o.length, c = 0; t >= 1152; c += 1152) {
                        var s = o.subarray(c, c + 1152);
                        d(r.encodeBuffer(s)), t -= 1152
                    }
                },
                f = function() {
                    d(r.flush()), self.postMessage({
                        cmd: "end",
                        buf: c
                    }), console.log("done encoding"), s()
                };
            e.onmessage = function(e) {
                switch (e.data.cmd) {
                    case "init":
                        l(e.data.config);
                        break;
                    case "encode":
                        u(e.data.rawInput);
                        break;
                    case "finish":
                        f()
                }
            }
        },
        r = function() {
            var e = document.getElementsByTagName("script"),
                t = e[e.length - 1].getAttribute("src"),
                r = t.substr(0, t.lastIndexOf("/") + 1);
            if (r && !r.match(/:\/\//)) {
                var n = document.createElement("a");
                return n.href = r, n.href
            }
            return r
        }(),
        n = function(e) {
            e = e || {}, e.lameJsUrl = e.lameJsUrl || r + "/lame.min.js";
            var n = !1,
                o = t.toWorker(e);
            this.isBusy = function() {
                return n
            }, this.convert = function(e) {
                var t = "conversion_" + Date.now(),
                    r = t + ":";
                console.log(r, "Starting conversion");
                var i, a, c = {};
                switch (typeof arguments[1]) {
                    case "object":
                        c = arguments[1];
                        break;
                    case "function":
                        i = arguments[1];
                        break;
                    default:
                        throw "parameter 2 is expected to be an object (config) or function (success callback)"
                }
                if ("function" == typeof arguments[2] && (i ? a = arguments[2] : i = arguments[
                        2]), "function" != typeof arguments[3] || a || (a = arguments[3]), n)
                    throw "Another conversion is in progress";
                var s = e.size,
                    d = new FileReader,
                    l = Date.now();
                d.onload = function(e) {
                    console.log(r, "Passed to BG process"), o.postMessage({
                        cmd: "init",
                        config: c
                    }), o.postMessage({
                        cmd: "encode",
                        rawInput: e.target.result
                    }), o.postMessage({
                        cmd: "finish"
                    }), o.onmessage = function(e) {
                        if ("end" == e.data.cmd) {
                            console.log(r, "Done converting to Mp3");
                            var t = new Blob(e.data.buf, {
                                type: "audio/mp3"
                            });
                            console.log(r, "Conversion completed in: " + (Date.now() -
                                l) / 1e3 + "s");
                            var o = t.size;
                            console.log(r + "Initial size: = " + s + ", Final size = " +
                                    o + ", Reduction: " + Number(100 * (s - o) / s).toPrecision(
                                        4) + "%"), n = !1, i && "function" == typeof i &&
                                i(t)
                        }
                    }
                }, n = !0, d.readAsArrayBuffer(e)
            }
        };
    e.MP3Converter = n
}(window),
function(e) {
    "use strict";
    e.swfobject = function() {
        function e() {
            "complete" == b.readyState && (b.parentNode.removeChild(b), t())
        }

        function t() {
            if (!O) {
                if (U.ie && U.win) {
                    var e = v("span");
                    try {
                        var t = P.getElementsByTagName("body")[0].appendChild(e);
                        t.parentNode.removeChild(t)
                    } catch (e) {
                        return
                    }
                }
                O = !0, N && (clearInterval(N), N = null);
                for (var r = I.length, n = 0; n < r; n++) I[n]()
            }
        }

        function r(e) {
            O ? e() : I[I.length] = e
        }

        function n(e) {
            if (typeof S.addEventListener != A) S.addEventListener("load", e, !1);
            else if (typeof P.addEventListener != A) P.addEventListener("load", e, !1);
            else if (typeof S.attachEvent != A) g(S, "onload", e);
            else if ("function" == typeof S.onload) {
                var t = S.onload;
                S.onload = function() {
                    t(), e()
                }
            } else S.onload = e
        }

        function o() {
            for (var e = F.length, t = 0; t < e; t++) {
                var r = F[t].id;
                if (U.pv[0] > 0) {
                    var n = p(r);
                    n && (F[t].width = n.getAttribute("width") ? n.getAttribute("width") : "0",
                        F[t].height = n.getAttribute("height") ? n.getAttribute("height") :
                        "0", m(F[t].swfVersion) ? (U.webkit && U.webkit < 312 && i(n), w(r,
                            !0)) : F[t].expressInstall && !x && m("6.0.65") && (U.win || U.mac) ?
                        a(F[t]) : c(n))
                } else w(r, !0)
            }
        }

        function i(e) {
            var t = e.getElementsByTagName(k)[0];
            if (t) {
                var r = v("embed"),
                    n = t.attributes;
                if (n)
                    for (var o = n.length, i = 0; i < o; i++) "DATA" == n[i].nodeName ? r.setAttribute(
                        "src", n[i].nodeValue) : r.setAttribute(n[i].nodeName, n[i].nodeValue);
                var a = t.childNodes;
                if (a)
                    for (var c = a.length, s = 0; s < c; s++) 1 == a[s].nodeType && "PARAM" ==
                        a[s].nodeName && r.setAttribute(a[s].getAttribute("name"), a[s].getAttribute(
                            "value"));
                e.parentNode.replaceChild(r, e)
            }
        }

        function a(e) {
            x = !0;
            var t = p(e.id);
            if (t) {
                if (e.altContentId) {
                    var r = p(e.altContentId);
                    r && (T = r, B = e.altContentId)
                } else T = s(t);
                !/%$/.test(e.width) && parseInt(e.width, 10) < 310 && (e.width = "310"), !/%$/.test(
                        e.height) && parseInt(e.height, 10) < 137 && (e.height = "137"), P.title =
                    P.title.slice(0, 47) + " - Flash Player Installation";
                var n = U.ie && U.win ? "ActiveX" : "PlugIn",
                    o = P.title,
                    i = "MMredirectURL=" + S.location + "&MMplayerType=" + n + "&MMdoctitle=" +
                    o,
                    a = e.id;
                if (U.ie && U.win && 4 != t.readyState) {
                    var c = v("div");
                    a += "SWFObjectNew", c.setAttribute("id", a), t.parentNode.insertBefore(c,
                        t), t.style.display = "none";
                    g(S, "onload", function() {
                        t.parentNode.removeChild(t)
                    })
                }
                d({
                    data: e.expressInstall,
                    id: C,
                    width: e.width,
                    height: e.height
                }, {
                    flashvars: i
                }, a)
            }
        }

        function c(e) {
            if (U.ie && U.win && 4 != e.readyState) {
                var t = v("div");
                e.parentNode.insertBefore(t, e), t.parentNode.replaceChild(s(e), t), e.style.display =
                    "none";
                g(S, "onload", function() {
                    e.parentNode.removeChild(e)
                })
            } else e.parentNode.replaceChild(s(e), e)
        }

        function s(e) {
            var t = v("div");
            if (U.win && U.ie) t.innerHTML = e.innerHTML;
            else {
                var r = e.getElementsByTagName(k)[0];
                if (r) {
                    var n = r.childNodes;
                    if (n)
                        for (var o = n.length, i = 0; i < o; i++) 1 == n[i].nodeType && "PARAM" ==
                            n[i].nodeName || 8 == n[i].nodeType || t.appendChild(n[i].cloneNode(
                                !0))
                }
            }
            return t
        }

        function d(e, t, r) {
            var n, o = p(r);
            if (o)
                if (typeof e.id == A && (e.id = r), U.ie && U.win) {
                    var i = "";
                    for (var a in e) e[a] != Object.prototype[a] && ("data" == a.toLowerCase() ?
                        t.movie = e[a] : "styleclass" == a.toLowerCase() ? i += ' class="' +
                        e[a] + '"' : "classid" != a.toLowerCase() && (i += " " + a + '="' +
                            e[a] + '"'));
                    var c = "";
                    for (var s in t) t[s] != Object.prototype[s] && (c += '<param name="' + s +
                        '" value="' + t[s] + '" />');
                    o.outerHTML =
                        '<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"' + i +
                        ">" + c + "</object>", E[E.length] = e.id, n = p(e.id)
                } else if (U.webkit && U.webkit < 312) {
                var d = v("embed");
                d.setAttribute("type", R);
                for (var u in e) e[u] != Object.prototype[u] && ("data" == u.toLowerCase() ? d.setAttribute(
                    "src", e[u]) : "styleclass" == u.toLowerCase() ? d.setAttribute(
                    "class", e[u]) : "classid" != u.toLowerCase() && d.setAttribute(u,
                    e[u]));
                for (var f in t) t[f] != Object.prototype[f] && "movie" != f.toLowerCase() && d
                    .setAttribute(f, t[f]);
                o.parentNode.replaceChild(d, o), n = d
            } else {
                var g = v(k);
                g.setAttribute("type", R);
                for (var m in e) e[m] != Object.prototype[m] && ("styleclass" == m.toLowerCase() ?
                    g.setAttribute("class", e[m]) : "classid" != m.toLowerCase() && g.setAttribute(
                        m, e[m]));
                for (var h in t) t[h] != Object.prototype[h] && "movie" != h.toLowerCase() && l(
                    g, h, t[h]);
                o.parentNode.replaceChild(g, o), n = g
            }
            return n
        }

        function l(e, t, r) {
            var n = v("param");
            n.setAttribute("name", t), n.setAttribute("value", r), e.appendChild(n)
        }

        function u(e) {
            var t = p(e);
            !t || "OBJECT" != t.nodeName && "EMBED" != t.nodeName || (U.ie && U.win ? 4 == t.readyState ?
                f(e) : S.attachEvent("onload", function() {
                    f(e)
                }) : t.parentNode.removeChild(t))
        }

        function f(e) {
            var t = p(e);
            if (t) {
                for (var r in t) "function" == typeof t[r] && (t[r] = null);
                t.parentNode.removeChild(t)
            }
        }

        function p(e) {
            var t = null;
            try {
                t = P.getElementById(e)
            } catch (e) {}
            return t
        }

        function v(e) {
            return P.createElement(e)
        }

        function g(e, t, r) {
            e.attachEvent(t, r), L[L.length] = [e, t, r]
        }

        function m(e) {
            var t = U.pv,
                r = e.split(".");
            return r[0] = parseInt(r[0], 10), r[1] = parseInt(r[1], 10) || 0, r[2] = parseInt(r[
                    2], 10) || 0, t[0] > r[0] || t[0] == r[0] && t[1] > r[1] || t[0] == r[0] &&
                t[1] == r[1] && t[2] >= r[2]
        }

        function h(e, t) {
            if (!U.ie || !U.mac) {
                var r = P.getElementsByTagName("head")[0],
                    n = v("style");
                if (n.setAttribute("type", "text/css"), n.setAttribute("media", "screen"), U.ie &&
                    U.win || typeof P.createTextNode == A || n.appendChild(P.createTextNode(e +
                        " {" + t + "}")), r.appendChild(n), U.ie && U.win && typeof P.styleSheets !=
                    A && P.styleSheets.length > 0) {
                    var o = P.styleSheets[P.styleSheets.length - 1];
                    typeof o.addRule == k && o.addRule(e, t)
                }
            }
        }

        function w(e, t) {
            var r = t ? "visible" : "hidden";
            O && p(e) ? p(e).style.visibility = r : h("#" + e, "visibility:" + r)
        }

        function y(e) {
            return null != /[\\\"<>\.;]/.exec(e) ? encodeURIComponent(e) : e
        }
        var b, A = "undefined",
            k = "object",
            R = "application/x-shockwave-flash",
            C = "SWFObjectExprInst",
            S = window,
            P = document,
            M = navigator,
            I = [],
            F = [],
            E = [],
            L = [],
            N = null,
            T = null,
            B = null,
            O = !1,
            x = !1,
            U = function() {
                var e = typeof P.getElementById != A && typeof P.getElementsByTagName != A &&
                    typeof P.createElement != A,
                    t = [0, 0, 0],
                    r = null;
                if (typeof M.plugins != A && typeof M.plugins["Shockwave Flash"] == k) !(r = M.plugins[
                    "Shockwave Flash"].description) || typeof M.mimeTypes != A && M.mimeTypes[
                    R] && !M.mimeTypes[R].enabledPlugin || (r = r.replace(
                        /^.*\s+(\S+\s+\S+$)/, "$1"), t[0] = parseInt(r.replace(/^(.*)\..*$/,
                        "$1"), 10), t[1] = parseInt(r.replace(/^.*\.(.*)\s.*$/, "$1"), 10),
                    t[2] = /r/.test(r) ? parseInt(r.replace(/^.*r(.*)$/, "$1"), 10) : 0);
                else if (typeof S.ActiveXObject != A) {
                    var n = null,
                        o = !1;
                    try {
                        n = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7")
                    } catch (e) {
                        try {
                            n = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6"), t = [6, 0,
                                21
                            ], n.AllowScriptAccess = "always"
                        } catch (e) {
                            6 == t[0] && (o = !0)
                        }
                        if (!o) try {
                            n = new ActiveXObject("ShockwaveFlash.ShockwaveFlash")
                        } catch (e) {}
                    }
                    if (!o && n) try {
                        r = n.GetVariable("$version"), r && (r = r.split(" ")[1].split(","),
                            t = [parseInt(r[0], 10), parseInt(r[1], 10), parseInt(r[2],
                                10)])
                    } catch (e) {}
                }
                var i = M.userAgent.toLowerCase(),
                    a = M.platform.toLowerCase();
                return {
                    w3cdom: e,
                    pv: t,
                    webkit: !!/webkit/.test(i) && parseFloat(i.replace(
                        /^.*webkit\/(\d+(\.\d+)?).*$/, "$1")),
                    ie: !1,
                    win: a ? /win/.test(a) : /win/.test(i),
                    mac: a ? /mac/.test(a) : /mac/.test(i)
                }
            }();
        (function() {
            if (U.w3cdom) {
                if (r(o), U.ie && U.win) try {
                    P.write("<script id=__ie_ondomload defer=true src=//:></script>"),
                        b = p("__ie_ondomload"), b && g(b, "onreadystatechange", e)
                } catch (e) {}
                U.webkit && typeof P.readyState != A && (N = setInterval(function() {
                    /loaded|complete/.test(P.readyState) && t()
                }, 10)), typeof P.addEventListener != A && P.addEventListener(
                    "DOMContentLoaded", t, null), n(t)
            }
        })(),
        function() {
            U.ie && U.win && window.attachEvent("onunload", function() {
                for (var e = L.length, t = 0; t < e; t++) L[t][0].detachEvent(L[t][1],
                    L[t][2]);
                for (var r = E.length, n = 0; n < r; n++) u(E[n]);
                for (var o in U) U[o] = null;
                U = null;
                for (var i in swfobject) swfobject[i] = null;
                swfobject = null
            })
        }();
        return {
            registerObject: function(e, t, r) {
                if (U.w3cdom && e && t) {
                    var n = {};
                    n.id = e, n.swfVersion = t, n.expressInstall = !!r && r, F[F.length] =
                        n, w(e, !1)
                }
            },
            getObjectById: function(e) {
                var t = null;
                if (U.w3cdom) {
                    var r = p(e);
                    if (r) {
                        var n = r.getElementsByTagName(k)[0];
                        !n || n && typeof r.SetVariable != A ? t = r : typeof n.SetVariable !=
                            A && (t = n)
                    }
                }
                return t
            },
            embedSWF: function(e, t, n, o, i, c, s, l, u) {
                if (U.w3cdom && e && t && n && o && i)
                    if (n += "", o += "", m(i)) {
                        w(t, !1);
                        var f = {};
                        if (u && typeof u === k)
                            for (var p in u) u[p] != Object.prototype[p] && (f[p] = u[p]);
                        f.data = e, f.width = n, f.height = o;
                        var v = {};
                        if (l && typeof l === k)
                            for (var g in l) l[g] != Object.prototype[g] && (v[g] = l[g]);
                        if (s && typeof s === k)
                            for (var h in s) s[h] != Object.prototype[h] && (typeof v.flashvars !=
                                A ? v.flashvars += "&" + h + "=" + s[h] : v.flashvars =
                                h + "=" + s[h]);
                        r(function() {
                            d(f, v, t), f.id == t && w(t, !0)
                        })
                    } else c && !x && m("6.0.65") && (U.win || U.mac) && (x = !0, w(t, !1),
                        r(function() {
                            var e = {};
                            e.id = e.altContentId = t, e.width = n, e.height = o, e
                                .expressInstall = c, a(e)
                        }))
            },
            getFlashPlayerVersion: function() {
                return {
                    major: U.pv[0],
                    minor: U.pv[1],
                    release: U.pv[2]
                }
            },
            hasFlashPlayerVersion: m,
            createSWF: function(e, t, r) {
                return U.w3cdom ? d(e, t, r) : void 0
            },
            removeSWF: function(e) {
                U.w3cdom && u(e)
            },
            createCSS: function(e, t) {
                U.w3cdom && h(e, t)
            },
            addDomLoadEvent: r,
            addLoadEvent: n,
            getQueryParamValue: function(e) {
                var t = P.location.search || P.location.hash;
                if (null == e) return y(t);
                if (t)
                    for (var r = t.substring(1).split("&"), n = 0; n < r.length; n++)
                        if (r[n].substring(0, r[n].indexOf("=")) == e) return y(r[n].substring(
                            r[n].indexOf("=") + 1));
                return ""
            },
            expressInstallCallback: function() {
                if (x && T) {
                    var e = p(C);
                    e && (e.parentNode.replaceChild(T, e), B && (w(B, !0), U.ie && U.win &&
                        (T.style.display = "block")), T = null, B = null, x = !1)
                }
            }
        }
    }()
}(window);
